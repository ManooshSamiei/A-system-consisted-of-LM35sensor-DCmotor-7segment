;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 5/30/2018
;Author  : msi
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;#include <delay.h>
;int year=0 , mounth=0 , day=0 , hour=0 , minute=0 , second=0;
;int display[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};

	.DSEG
;char key,c;
;char comparematch;
;
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0052 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0053 char status,data;
; 0000 0054 status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0055 data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0056 key=data;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0057 
; 0000 0058 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0059    {
; 0000 005A    rx_buffer[rx_wr_index++]=data;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 005B #if RX_BUFFER_SIZE == 256
; 0000 005C    // special case for receiver buffer size=256
; 0000 005D    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 005E #else
; 0000 005F    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0060    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0061       {
; 0000 0062       rx_counter=0;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0063       rx_buffer_overflow=1;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0064       }
; 0000 0065 #endif
; 0000 0066    }
;PCODE: $00000031 VOL: 0
; 0000 0067 }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 006E {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 006F char data;
; 0000 0070 while (rx_counter==0);
;PCODE: $00000039 VOL: 0
;	data -> R17
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0071 data=rx_buffer[rx_rd_index++];
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0072 #if RX_BUFFER_SIZE != 256
; 0000 0073 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0074 #endif
; 0000 0075 #asm("cli")
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
	cli
;PCODE: $0000004E VOL: 0
; 0000 0076 --rx_counter;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0077 #asm("sei")
;PCODE: $00000052 VOL: 0
	sei
;PCODE: $00000053 VOL: 0
; 0000 0078 return data;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0079 }
;PCODE: $00000057 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0089 {
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 008A if (tx_counter)
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 008B    {
; 0000 008C    --tx_counter;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 008D    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 008E #if TX_BUFFER_SIZE != 256
; 0000 008F    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0090 #endif
; 0000 0091    }
;PCODE: $0000006D VOL: 0
; 0000 0092 }
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0099 {
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 009A while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $00000074 VOL: 0
;	c -> Y+0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 009B #asm("cli")
;PCODE: $0000007B VOL: 0
	cli
;PCODE: $0000007C VOL: 0
; 0000 009C if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 009D    {
; 0000 009E    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 009F #if TX_BUFFER_SIZE != 256
; 0000 00A0    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00A1 #endif
; 0000 00A2    ++tx_counter;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00A3    }
; 0000 00A4 else
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00A5    UDR=c;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00A6 #asm("sei")
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
	sei
;PCODE: $0000009C VOL: 0
; 0000 00A7 }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer 0 output compare interrupt service routine
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 00B0 {
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00B1 
; 0000 00B2 comparematch++;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00B3 
; 0000 00B4  if(comparematch==4){
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00B5         TCNT0=0X00;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00B6         second++;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00B7         comparematch=0;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00B8         if(key=='s'){
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00B9         key=getchar();
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00BA         if(second==60){second=0; minute++;}
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00BB         if(minute==60){minute=0; hour++;}
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00BC         if(hour==24){hour=0;day++;}
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00BD         if(day==31){day=0; mounth++;}
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00BE         if(mounth==12){mounth=0; year++;}
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00BF         //show temp
; 0000 00C0         printf("temprature is: %d" , c);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00C1         putchar('\n\r');
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00C2 
; 0000 00C3         //show Date
; 0000 00C4          putchar('\n\r');
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00C5          putchar('\n\r');
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00C6 
; 0000 00C7         putsf("Date:");
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00C8         printf("year=%d",year);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00C9         putchar('/');
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00CA 
; 0000 00CB         printf("month=%d",mounth);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00CC         putchar('/');
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00CD 
; 0000 00CE         printf("day=%d",day);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00CF         putchar('\n\r');
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00D0 
; 0000 00D1         //show Time
; 0000 00D2         putsf("Time:");
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00D3         printf("hour=%d",hour);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00D4         putchar(':');
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00D5 
; 0000 00D6         printf("minute=%d",minute);
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00D7         putchar(':');
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00D8 
; 0000 00D9         printf("second=%d",second);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00DA         putchar('\n\r');
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00DB         putchar('\n\r');
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00DC         key='h';   }}
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00DD }
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;
;#define ADC_VREF_TYPE 0xC0
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 00E4 {
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00E5 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $00000147 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00E6 // Delay needed for the stabilization of the ADC input voltage
; 0000 00E7 delay_us(10);
;PCODE: $0000014B VOL: 0
; 0000 00E8 // Start the AD conversion
; 0000 00E9 ADCSRA|=0x40;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00EA // Wait for the AD conversion to complete
; 0000 00EB while ((ADCSRA & 0x10)==0);
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00EC ADCSRA|=0x10;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00ED return ADCW;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00EE }
;PCODE: $00000159 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 00F3 {
;PCODE: $0000015A VOL: 0
; 0000 00F4 int temp[3]={0,0,0};
; 0000 00F5 float n;
; 0000 00F6 int T;
; 0000 00F7 int k=0,i=0,j=0,l=0,p=0;
; 0000 00F8 char pd,v,A,B;
; 0000 00F9 
; 0000 00FA // Declare your local variables here
; 0000 00FB 
; 0000 00FC // Input/Output Ports initialization
; 0000 00FD // Port A initialization
; 0000 00FE // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00FF // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0100 PORTA=0x00;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;	temp -> Y+14
;	n -> Y+10
;	T -> R16,R17
;	k -> R18,R19
;	i -> R20,R21
;	j -> Y+8
;	l -> Y+6
;	p -> Y+4
;	pd -> Y+3
;	v -> Y+2
;	A -> Y+1
;	B -> Y+0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0101 DDRA=0x00;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0102 
; 0000 0103 // Port B initialization
; 0000 0104 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0105 // State7=1 State6=1 State5=1 State4=1 State3=1 State2=1 State1=1 State0=1
; 0000 0106 PORTB=0xFF;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0107 DDRB=0xFF;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0108 
; 0000 0109 // Port C initialization
; 0000 010A // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 010B // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 010C PORTC=0x00;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 010D DDRC=0xFF;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 010E 
; 0000 010F // Port D initialization
; 0000 0110 // Func7=In Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0111 // State7=T State6=T State5=0 State4=T State3=T State2=T State1=T State0=T
; 0000 0112 PORTD=0x00;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0113 DDRD=0x20;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0114 
; 0000 0115 // Timer/Counter 0 initialization
; 0000 0116 // Clock source: System Clock
; 0000 0117 // Clock value: 0.977 kHz
; 0000 0118 // Mode: Normal top=0xFF
; 0000 0119 // OC0 output: Disconnected
; 0000 011A TCCR0=0x05;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 011B TCNT0=0x00;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 011C OCR0=0xD1;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 011D 
; 0000 011E // Timer/Counter 1 initialization
; 0000 011F // Clock source: System Clock
; 0000 0120 // Clock value: 0.977 kHz
; 0000 0121 // Mode: Fast PWM top=ICR1
; 0000 0122 // OC1A output: Non-Inv.
; 0000 0123 // OC1B output: Discon.
; 0000 0124 // Noise Canceler: Off
; 0000 0125 // Input Capture on Falling Edge
; 0000 0126 // Timer1 Overflow Interrupt: Off
; 0000 0127 // Input Capture Interrupt: Off
; 0000 0128 // Compare A Match Interrupt: Off
; 0000 0129 // Compare B Match Interrupt: Off
; 0000 012A TCCR1A=0x82;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 012B TCCR1B=0x1D;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 012C TCNT1H=0x00;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 012D TCNT1L=0x00;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 012E ICR1H=0x00;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 012F ICR1L=0x5A;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0130 OCR1AH=0x00;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0131 OCR1AL=0x00;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0132 OCR1BH=0x00;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0133 OCR1BL=0x00;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 0134 
; 0000 0135 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0136 TIMSK=0x02;
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0137 
; 0000 0138 // USART initialization
; 0000 0139 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 013A // USART Receiver: On
; 0000 013B // USART Transmitter: On
; 0000 013C // USART Mode: Asynchronous
; 0000 013D // USART Baud Rate: 4800
; 0000 013E UCSRA=0x00;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 013F UCSRB=0xD8;
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 0140 UCSRC=0x86;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0141 UBRRH=0x00;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0142 UBRRL=0x0C;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0143 
; 0000 0144 // ADC initialization
; 0000 0145 // ADC Clock frequency: 500.000 kHz
; 0000 0146 // ADC Voltage Reference: Int., cap. on AREF
; 0000 0147 // Only the 8 most significant bits of
; 0000 0148 // the AD conversion result are used
; 0000 0149 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 014A ADCSRA=0x81;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 014B 
; 0000 014C // Global enable interrupts
; 0000 014D #asm("sei")
;PCODE: $0000019E VOL: 0
	sei
;PCODE: $0000019F VOL: 0
; 0000 014E 
; 0000 014F while (1)
;PCODE: $000001A0 VOL: 0
; 0000 0150       {
; 0000 0151       n=(float)read_adc(0)/4;   //n is a float variable
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0152       c=read_adc(0)/4;   //c is a character variable
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0153       if(k==0){
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0154       OCR1AL=c ; }
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0155 
; 0000 0156 
; 0000 0157 
; 0000 0158 
; 0000 0159       if(l==0){
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 015A       T=(n*10);}
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 015B       temp[0]=T%10;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 015C       temp[1]=(T/10)%10;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 015D       temp[2]=(T/100)%10;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 015E 
; 0000 015F 
; 0000 0160       pd=0x01;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0161       for(i=0;i<3;i++){
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0162       PORTB=~pd;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0163       PORTC=display[temp[i]];
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0164       if(i==1){PORTC+=0x80;}
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 0165       pd=pd<<1;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 0166       delay_ms(5);
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 0167        }
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0168 
; 0000 0169       if(p==0){
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 016A       putsf("to enter motors' settings press v");
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 016B       putchar('\n\r');
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 016C       putsf("to enter time settings press t");
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 016D       putchar('\n\r');
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 016E       putsf("to enter 7segments's settings press g");
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 016F       putchar('\n\r');
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0170       putchar('\n\r');
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0171       p++;}
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 0172 
; 0000 0173       //motors velocity
; 0000 0174       if(key=='v'){
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 0175       key=getchar();
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0176 	  putsf("motor's settings:");
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 0177       putchar('\n\r');
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0178       putsf("set motors velocity or control it by temprature? press a or b");
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 0179       putchar('\n\r');
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 017A       key=getchar();
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 017B 
; 0000 017C       if(key=='a'){
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 017D       putsf("velocity:");
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 017E       A=getchar();
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 017F       B=getchar();
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0180       A=A-48;
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0181       B=B-48;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0182       v=(A*10)+B;
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 0183       printf("%d",v);
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0184       putchar('\n\r');
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 0185       OCR1AH=0x00;
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 0186       OCR1AL=v ;}
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 0187 
; 0000 0188       if(key=='b'){
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 0189       OCR1AH=0x00;
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 018A       OCR1AL=c ;
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 018B       putsf("temperature control ok");
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 018C       putchar('\n\r');}
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 018D 
; 0000 018E       k++;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 018F 
; 0000 0190       }
; 0000 0191 
; 0000 0192 
; 0000 0193        if(key=='t'){
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 0194        getchar();
;PCODE: $0000025C VOL: 0
; 0000 0195 	   putsf("time settings");
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 0196          year=0;
;PCODE: $00000260 VOL: 0
; 0000 0197         putsf("  year:");
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 0198          for(j=0;j<4;j++){
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 0199          A=getchar();
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 019A          A=A-48;
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 019B          year=10*year+A ;
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 019C          }
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 019D          printf("%d",year);
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 019E 
; 0000 019F          putsf("  MONTH:");
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 01A0          A=getchar();
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 01A1          B=getchar();
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 01A2          A=A-48;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 01A3          B=B-48;
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 01A4          mounth=(A*10)+B;
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 01A5          printf("%d",mounth);
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 01A6 
; 0000 01A7          while(mounth>12){
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 01A8          putsf("  MONTH:");
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 01A9          A=getchar();
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 01AA          B=getchar();
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 01AB          A=A-48;
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 01AC          B=B-48;
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 01AD          mounth=(A*10)+B;
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 01AE          printf("%d",mounth);}
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 01AF 
; 0000 01B0          putsf("  day:");
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 01B1          A=getchar();
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 01B2          B=getchar();
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 01B3          A=A-48;
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 01B4          B=B-48;
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 01B5          day=(A*10)+B;
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 01B6 
; 0000 01B7          while(day>31){
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 01B8          putsf("  day:");
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 01B9          A=getchar();
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 01BA          B=getchar();
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0000 01BB          A=A-48;
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 01BC          B=B-48;
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 01BD          day=(A*10)+B;}
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 01BE 
; 0000 01BF          printf("%d",day);
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 01C0 
; 0000 01C1          putsf("  hour:");
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
; 0000 01C2 	   A=getchar();
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0000 01C3          B=getchar();
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 01C4          A=A-48;
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 01C5          B=B-48;
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0000 01C6          hour=(A*10)+B;
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0000 01C7 
; 0000 01C8       while(hour>24){
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 01C9          putsf("  hour:");
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 01CA 	   A=getchar();
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0000 01CB          B=getchar();
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 01CC          A=A-48;
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 01CD          B=B-48;}
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
; 0000 01CE          printf("%d",hour);
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 01CF 
; 0000 01D0          putsf("  minute:");
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
; 0000 01D1          A=getchar();
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0000 01D2          B=getchar();
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
; 0000 01D3          A=A-48;
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 01D4          B=B-48;
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 01D5          minute=(A*10)+B;
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0000 01D6          printf("%d",minute);
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
; 0000 01D7 
; 0000 01D8          while(minute>60){
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 01D9          putsf("  minute:");
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0000 01DA          A=getchar();
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
; 0000 01DB          B=getchar();
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0000 01DC          A=A-48;
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0000 01DD          B=B-48;
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0000 01DE          minute=(A*10)+B;
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 01DF          printf("%d",minute);}
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
; 0000 01E0 
; 0000 01E1          putsf("  second:");
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 01E2          A=getchar();
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 01E3          B=getchar();
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 01E4          A=A-48;
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
; 0000 01E5          B=B-48;
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0000 01E6           second=(A*10)+B;
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0000 01E7          printf("%d", second);
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
; 0000 01E8 
; 0000 01E9          while(second>60){
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
; 0000 01EA          putsf("  second:");
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
; 0000 01EB          A=getchar();
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
; 0000 01EC          B=getchar();
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 01ED          A=A-48;
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 01EE          B=B-48;
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
; 0000 01EF           second=(A*10)+B;
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
; 0000 01F0          printf("%d", second);}
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
; 0000 01F1          putchar('\n\r');
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
; 0000 01F2          putchar('\n\r');
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
; 0000 01F3          putsf("to show the time,date and temprature press s");
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
; 0000 01F4          putchar('\n\r');
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
; 0000 01F5          putchar('\n\r');
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
; 0000 01F6 	    }
; 0000 01F7 
; 0000 01F8       if(key=='g'){
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
; 0000 01F9       key=getchar();
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
; 0000 01FA 	  putsf("7segment's settings:");
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
; 0000 01FB       putchar('\n\r');
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
; 0000 01FC       putsf("Would you like to show an arbitrary number or the sensors temperature on 7 segment ? press a or b");
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
; 0000 01FD       putchar('\n\r');
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
; 0000 01FE       key=getchar();
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
; 0000 01FF 
; 0000 0200       if(key=='a'){
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
; 0000 0201       putsf("enter the number");
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
; 0000 0202 
; 0000 0203       A=getchar();
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
; 0000 0204       B=getchar();
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
; 0000 0205       A=A-48;
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
; 0000 0206       B=B-48;
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
; 0000 0207       T=(A*10)+B;
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
; 0000 0208       printf("%d",T);
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
; 0000 0209       putchar('\n\r');
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0000 020A       T=T*10;
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
; 0000 020B           }
; 0000 020C 
; 0000 020D       if(key=='b'){
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
; 0000 020E       T=(n*10);
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0000 020F       putsf("sensor temperature ok");
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
; 0000 0210       putchar('\n\r');}
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
; 0000 0211 
; 0000 0212       l++;}
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
; 0000 0213 
; 0000 0214       }
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
; 0000 0215 }
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
